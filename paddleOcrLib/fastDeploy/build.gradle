plugins {
    id 'com.android.library'
    id 'maven-publish'
}

//configurations.maybeCreate("default")
//artifacts.add("default", file('fastdeploy-android-sdk-latest-dev.aar'))

android {
    namespace 'com.ecioptime.fastdeploy'
    compileSdk 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        minSdk 23
        targetSdk 33

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        consumerProguardFiles "consumer-rules.pro"
    }
}



//publishing {
//    publications {
//        aar(MavenPublication) {
//            groupId = 'com.ioptime'
//            artifactId = 'fast-deploy'
//            version = '1.0.0'
////            from components.release
//        }
//    }
//    repositories {
//        mavenLocal() // Or a remote repository
//    }
//}

//afterEvaluate {
//    publishing{
//        publications{
//            release(MavenPublication){
//                groupId = "com.ioptime"
//                artifactId = "fast-deploy"
//                version = "1.0.0"
//                // Applies the component for the release build variant
////                from components.release
//                // Adds javadocs and sources as separate jars.
//                artifact androidSourcesJar
//                artifact androidJavadocsJar
//            }
//        }
//    }
//}

afterEvaluate {
    android.libraryVariants.each {variant->
        publishing.publications.create(variant.name,MavenPublication){
            from components.findByName(variant.name)

            groupId = "com.ioptime"
            artifactId = "fast-deploy"
            version = '1.0.0'

            artifact("fastdeploy-android-sdk-latest-dev.aar")

//            artifact("$buildDir/outputs/aar/paddleOcrLib-debug.aar") {
//                classifier 'aar-with-dependencies'
//            }
//            artifact("/libs/fastdeploy-android-sdk-latest-dev.aar") {
//                classifier 'fastdeploy-android-sdk-latest-dev'
//            }
        }

    }
}


task androidJavadocs(type: Javadoc){
    source = android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all{ variant->
        if (variant.name == 'release'){
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    // excluding a specific class from being documented
    exclude '**/NameOfClassToExclude.java'

    title = null

    options{
        doclet = "com.google.doclava.Doclava"
        docletpath = [file("libs/doclava-1.0.6.jar")]
        noTimestamp = false

        // show only Protected & Public
        memberLevel = JavadocMemberLevel.PROTECTED
    }

}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs){
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}


task androidSourcesJar(type: Jar){
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}